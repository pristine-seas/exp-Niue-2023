---
title: "Niue exp notebook"
author: "Juan Mayorga"
number-sections: true
date: "5/22/2021"
format: 
  html:
    self-contained: true
    code-fold: true
    toc: true
    toc-location: left
---

```{r, message=F, warning = F, fig.width=10, fig.height=10}
library(paletteer)
library(sf)
library(terra)
library(tidyverse)

PristineSeasR::set_ps_paths(email = "marine.data.science@ngs.org")

exp_path <- file.path(ps_science_path, "expeditions", "Niue-2023")

ps_data_path <- file.path(ps_science_path, "datasets/")

NAS_path <- "/Volumes/exp-Niue-2023/"
```

# EEZ

```{r, eval = T}
NIU_eez <- sf::st_read(file.path(ps_data_path, "marine-regions", "eez_v11.gpkg")) %>%
  sf::st_wrap_dateline(options = c("WRAPDATELINE=YES", "DATELINEOFFSET=180"), quiet = TRUE) %>%
  janitor::clean_names() |> 
  filter(territory1 == "Niue") 

NIU_eez |> 
  sf::st_area()

NIU_eez <- NIU_eez |> 
  nngeo::st_remove_holes() 
  
NIU_eez |> 
   sf::st_write(file.path(exp_path, 
                          "data/secondary/processed",
                          "NIU_eez.shp"), append = FALSE)
```

# MPA

```{r}
mpatlas <- sf::st_read(file.path(ps_data_path, 
                                 "mpa-atlas", 
                                 "MPAtlas_20201223_clean", 
                                 "mpatlas_20201223_clean.shp")) 
```

# Bathymetry

```{r}
niue <- read.table(file.path(exp_path, 
                             "data", "secondary/raw", "nu_niue_bathy", "nu_bathy_10m_grid.xyz"),
                           header = F,
                           dec =".") %>%
   sf::st_as_sf(coords = c("V1", "V2"),
                 crs = 32702) %>%
  stars::st_rasterize() |> 
  terra::rast()

plot(niue)

terra::writeRaster(niue, 
                   filename = file.path(exp_path, 
                                        "data/secondary/processed",
                                        "nu_bathy_10m_grid.tiff"))
```

```{r}
etopo_regional <- terra::rast(file.path(exp_path, 
                             "data", "secondary/raw/etopo/regional.tiff"))

etopo_regional <- ifel(etopo_regional >= 0, NA, etopo_regional)

terra::writeRaster(etopo_regional, 
                   filename = file.path(exp_path, 
                                        "data/secondary/processed",
                                        "ETOPO_2022_regional.tiff"))

plot(etopo_regional)
```

# Basemaps

```{r}
niue_sat <- terra::rast(file.path(exp_path, "data", "secondary/raw/Niue_sat.tif"))

niue_ext <- terra::ext(c(-169.953136, -169.76987, -19.160093, -18.949251)) |> 
  terra::as.polygons()

crs(niue_ext) <- "epsg:4326"

niue_ext <- niue_ext |> 
  terra::project(niue_sat)

niue_sat <- niue_sat |> 
  terra::crop(niue_ext) 

niue_sat <- niue_sat |> 
  terra::project(niue) |> 
  terra::crop(niue) |> 
  terra::mask(niue, inverse = T)

plotRGB(niue_sat)

terra::writeRaster(niue_sat, 
                   filename = file.path(exp_path, 
                                        "data/secondary/processed",
                                        "niue_sat.tiff"))
```

# Seamounts

```{r}
smnts <- readxl::read_xlsx(path = file.path(exp_path, 
                                   "data/secondary/raw",
                                   "sopac_seamounts.xlsx")) |> 
  janitor::clean_names()


smnts <- smnts |> 
  mutate(latitude = str_remove_all(latitude, "S|’"),
         longitude = str_remove_all(longitude, "E|’")) |> 
  mutate(across(c("latitude", "longitude"), 
                ~str_replace_all(.x,"º", " ") |> str_trim() |> str_squish())) |> 
  mutate(across(c("latitude", "longitude"), 
                ~measurements::conv_unit(.x,
                                          from = "deg_dec_min", to = "dec_deg"))) |> 
  mutate(across(c("latitude", "longitude"), as.numeric)) |> 
  mutate(latitude = latitude*-1,
         longitude = longitude*-1) 

smnts_shp <- smnts |> 
  sf::st_as_sf(coords = c("longitude", "latitude"), 
               crs = "epsg:4326") 

plot(smnts_shp)

sf::st_write(smnts_shp, file.path(exp_path, 
                                        "data/secondary/processed",
                                        "niue_smnts.shp"), append = F)
```

# 2016 data

```{r}
benthic_2016 <- readxl::read_xls(file.path(exp_path, 
                                           "data/secondary/raw/2016-expedition",
                                           "Niue_benthic_metadata.xls")) |> 
  janitor::clean_names()

benthic_2016 |> 
  select(station, lat, long) |> 
  mutate(lat = lat*-1, long = long*-1) |> 
  mutate(across(c("lat", "long"), 
                  ~ measurements::conv_unit(.x, from = "dec_deg", 
                                                  "deg_dec_min") |> 
                  str_trunc(width = 15) |> 
                  str_replace_all(" ", "_")) ) |> 
  write_csv("~/Desktop/niue_sites.csv")

benthic_2016 |> 
  select(station, lat, long) |> 
  sf::st_as_sf(coords = c("long", "lat"), 
               crs = "epsg:4326") |> 
  sf::st_write(file.path(exp_path, 
                         "data/secondary/processed",
                         "benthic_2016.shp"), 
               append = F)
```


```{r}
dscm_2016 <- readxl::read_xls(file.path(exp_path, 
                                        "data/secondary/raw/2016-expedition",
                                        "DOD Droplog - Niue 2016.xls"),
                              sheet = "Droplog - Niue 2014", skip = 2) |> 
  janitor::clean_names()

dscm_2016 |> 
  select(drop_no, depth_m, lat = location_n, lon =  location_e) |> 
  filter(!is.na(drop_no)) |> 
  sf::st_as_sf(coords = c("lon", "lat"), 
               crs = "epsg:4326") |> 
  sf::st_write(file.path(exp_path, 
                         "data/secondary/processed",
                         "dscm_2016.shp"), 
               append = F)
```

```{r}
bruvs_2016 <- readxl::read_xlsx(file.path(exp_path, 
                                          "data/secondary/raw/2016-expedition",
                                          "Niue BRUVs Data Alan 180117 (1).xlsx")) |> 
  janitor::clean_names()

bruvs_2016 |> 
  select(drop_no = drop, lat = lat_dd, lon =  long_dd) |> 
  filter(!is.na(drop_no)) |> 
  sf::st_as_sf(coords = c("lon", "lat"), 
               crs = "epsg:4326") |> 
  sf::st_write(file.path(exp_path, 
                         "data/secondary/processed",
                         "bruvs_2016.shp"), 
               append = F)
```


```{r}
pelagics_2016 <- readxl::read_xlsx(file.path(exp_path, 
                                          "data/secondary/raw/2016-expedition",
                                          "pelagics_coords.xlsx")) |> 
  janitor::clean_names()

pelagics_2016 |> 
  select(site, lat = latitude, lon =  longitude) |> 
  sf::st_as_sf(coords = c("lon", "lat"), 
               crs = "epsg:4326") |> 
  sf::st_write(file.path(exp_path, 
                         "data/secondary/processed",
                         "pelagics_2016.shp"), 
               append = F)
```

# Fish codes

```{r}
fish_data_2016 <- readxl::read_xlsx(file.path(exp_path, 
                            "data/secondary/raw/2016-expedition",
                            "Niue_fish_data_Pristine_Seas.xlsx")) |> 
  janitor::clean_names()

NIU_fish_codes <- fish_data_2016 |> 
  select(taxon_code = species, taxon = name_fishbase) |> 
  distinct() |> 
  arrange(taxon)

clean_fish_names <- bdc::bdc_clean_names(NIU_fish_codes$taxon) %>% 
  janitor::clean_names() %>% 
  select(taxon = scientific_name, 
         taxon_clean = names_clean) %>% 
  mutate(taxon_clean = coalesce(taxon_clean, 
                                taxadb::clean_names(taxon, lowercase = F))) %>% 
  distinct(taxon, taxon_clean) 

clean_fish_names %>% 
  filter(taxon!= taxon_clean)

clean_fish_names <- clean_fish_names |> 
  left_join(NIU_fish_codes) |> 
  select(taxon_code, everything())

worms_validation <- clean_fish_names$taxon_clean %>% 
  split(ceiling(seq_along(clean_fish_names$taxon_clean)/40)) %>% 
  furrr::future_map_dfr(worrms::wm_records_names) %>% 
  janitor::clean_names() %>% 
  filter(!is.na(scientificname)) %>% 
  mutate(rank = str_to_lower(rank),
         taxon_id = if_else(!is.na(valid_aphia_id),
                            paste0("WORMS:", valid_aphia_id),
                            NA_character_)) %>% 
  select(taxon_clean = scientificname, status, taxon_valid_name = valid_name, taxon_rank = rank, taxon_id, taxon_authority = valid_authority) %>% 
  distinct()

duped_taxa_worms <- worms_validation %>% 
  janitor::get_dupes(taxon_clean)

deduped_taxa_worms <- duped_taxa_worms |> 
  filter(status == "accepted")%>% 
  select(-dupe_count)

worms_validation <- worms_validation %>% 
  group_by(taxon_clean) %>% 
  filter(n() <= 1) %>% # remove duplicates
  bind_rows(deduped_taxa_worms) # add deduped

worms_validation %>% 
  filter(taxon_valid_name != taxon_clean) 

fish_taxa <- clean_fish_names %>% 
  left_join(worms_validation) 

fish_taxa |> 
  janitor::get_dupes(taxon_valid_name)

fish_taxa |> 
  select(-taxon_clean, -taxon_rank) |> 
  write_csv(file.path(exp_path, 
                         "data/secondary/processed",
                         "fish_taxa_list.csv"))
```

