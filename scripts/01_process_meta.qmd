---
title: "Niue 2023 expedition"
subtitle: "Trip summary"
author: "Juan Mayorga"
number-sections: true
date: today
theme: cosmo
format: 
  html:
    self-contained: true
    code-fold: true
    toc: true
    toc-location: left
---

```{r, message=F, warning = F, fig.width=10, fig.height=10}
library(paletteer)
library(sf)
library(terra)
library(tidyverse)

knitr::opts_chunk$set(eval = T, warning = F, message = F, include = F, echo = F)

PristineSeasR::set_ps_paths(email = "marine.data.science@ngs.org")

exp_path <- file.path(ps_science_path, "expeditions", "Niue-2023")

ps_data_path <- file.path(ps_science_path, "datasets/")
```

# Summary of work

```{r uvs}
uvs_meta <- readxl::read_xlsx(file.path(exp_path,
                                        "data/primary/raw/fish/NIU_2023_uvs_fish_fieldbook_AMF.xlsx"))

uvs_meta <- uvs_meta |> 
  mutate(expedition = "Niue_2023", 
         method = "Underwater visual survey",
         ps_station_id = str_replace(ps_site_id, "NIU", "NIU_2023"),
         date = lubridate::dmy(dd_mm_yyyy),
         local_time = hms::as_hms(local_time),
         alternative_site_id = if_else(!is.na(alternative_site_id), 
                                       paste0("NIU_2016_uvs_", alternative_site_id),
                                       NA_character_)) |> 
  select(expedition, method, ps_station_id, location = island,  date, local_time, lat, lon, habitat, 
         exposure, team_lead, alternative_site_id)
```

```{r birds}
birds_meta <- readxl::read_xlsx(file.path(exp_path,
                                        "data/primary/raw/birds/NIU_2023_birds_fieldbook.xlsx"),
                                sheet = "Bird transects",range = "A1:N63") |> 
  janitor::clean_names()

birds_meta <- birds_meta |> 
  mutate(expedition = "Niue_2023", 
         method = "Seabird survey",
         team_lead = "Chris Thompson",
         ps_station_id = str_replace(code, "NIU", "NIU_2023"),
         across(c(date), lubridate::ymd),
         across(c(time_start, time_stop), hms::as_hms),
         duration = hms::hms(minutes  = duration_mins)) |> 
  select(expedition, method, ps_station_id, location, date, time_start, time_stop, duration, 
         lon_start = long_start, lat_start,  lon_stop = long_stop, lat_stop, distance_km, team_lead,
         everything(), -sublocation, -code, -duration_mins)

birds_obs <- readxl::read_xlsx(file.path(exp_path,
                                        "data/primary/raw/birds/NIU_2023_birds_fieldbook.xlsx"),
                                sheet = "Bird transects",range = "O1:AF63") |> 
  janitor::clean_names() |> 
  bind_cols(birds_meta |> select(ps_station_id)) |> 
  pivot_longer(!ps_station_id, names_to = "taxa", values_to = "n_ind")

# birds_obs |> 
#   group_by(taxa) |> 
#   summarize(max_n = max(n_ind),
#             mean_n = mean(n_ind),
#             freq_obs = sum(n_ind > 0)/nrow(birds_meta)) |> 
#   mutate_if(is.numeric, round, 2) |> 
#   arrange(desc(freq_obs))
```

```{r bruvs}
bruvs_meta <- readxl::read_xlsx(file.path(exp_path,
                                        "data/primary/raw/bruvs/NIU_2023_bruvs_fieldbook.xlsx")) |> 
  janitor::clean_names()

bruvs_meta <- bruvs_meta |> 
  mutate(expedition = "Niue_2023", 
         method = "Benthic BRUVS",
         team_lead = "Jess Cramp",
         ps_station_id = paste0("NIU_2023_bruv_", 
                                formatC(drop, width = 2, format = "d", flag = "0")),
         across(c(date), lubridate::ymd),
         across(c(time_out, time_in), hms::as_hms),
         location = case_when(str_detect(site, "AN") ~ "Antiope",
                              str_detect(site, "BV") ~ "Beveridge reef",
                              TRUE ~ "Niue"))  |> 
      select(expedition, method, ps_station_id, location, date, time_in, time_out, lat, 
             lon = long, depth_m,  team_lead, wpt_sp3, everything(),
             -drop, -site, -exposure)
```

```{r dscm}
dscm_meta <- readxl::read_xlsx(file.path(exp_path,
                                        "data/primary/raw/dscm/NIU_2023_dscm_fieldbook.xlsx"))

dscm_meta <- dscm_meta |> 
  mutate(expedition = "Niue_2023", 
         method = "Deep sea cameras",
         ps_station_id = str_replace(ps_station_id, "NIU", "NIU_2023"),
         across(c(date_in, date_out), lubridate::ymd),
         across(c(time_in, time_out, recording_time_hrs), hms::as_hms),
         mission_duration = hms::hms(hours = mission_duration_hrs)) |> 
  select(expedition, method, ps_station_id, location, date_in, time_in, lon_in, lat_in,  
         date_out, time_out, lon_out, lat_out, depth_m, habitat,mission_duration, 
         recording_time = recording_time_hrs, dscm_id, team_lead,
         everything(), -sublocation) 
```

```{r edna}
edna_meta <- readxl::read_xlsx(file.path(exp_path,
                                        "data/primary/raw/edna/NIU_2023_edna_fieldbook.xlsx")) |> 
  janitor::clean_names()

edna_meta <- edna_meta |> 
  mutate(expedition = "Niue_2023", 
         method = "Environmental DNA",
         team_lead = "Molly Timmers",
         ps_station_id = str_replace(ps_station_id, "NIU", "NIU_2023"),
         paired_station_id = str_replace(paired_station_id, "NIU", "NIU_2023"),
         across(c(date), lubridate::dmy),
         across(c(filter_time, collection_time), hms::as_hms)) |> 
  left_join(uvs_meta |> 
              select(paired_station_id = ps_station_id, location, habitat, exposure, lat, lon), 
            by = c("paired_station_id")) |> 
    select(expedition, method, ps_station_id, ps_sample_id, location, habitat, exposure, date, lat, lon, depth_m, collection_time, filter_time, n_replicates, water_liters, preservative, filter_type, site_photos, team_lead, everything())
```

```{r plastics}
plastics_meta <- readxl::read_xlsx(file.path(exp_path,
                                        "data/primary/raw/microplastics/NIU_2023_plastics_fieldbook.xlsx")) |> 
  janitor::clean_names()

plastics_meta <- plastics_meta |> 
  mutate(expedition = "Niue_2023", 
         method = "Microplastics",
         collecting_method = "Bottle",
         team_lead = "Whitney Goodell",
         ps_station_id = str_replace(ps_station_id, "NIU", "NIU_2023"),
         across(c(date), lubridate::ymd),
         across(c(time), hms::as_hms)) |> 
  select(expedition, method, ps_station_id, location, date, time, lat, lon,  team_lead, everything(), -filterer)
```

```{r pelagics}
pelagics_meta <- readxl::read_xlsx(file.path(exp_path,
                                        "data/primary/raw/pelagics/NIU_2023_pelagics_fieldbook.xlsx"),
                                sheet = "Pelagic meta") |> 
  janitor::clean_names()

pelagics_meta <- pelagics_meta |> 
  mutate(expedition = "Niue_2023", 
         method = "Pelagic BRUVS",
         team_lead = "Chris Thompson",
         ps_station_id = str_replace(string, "NIUP23", "NIU_2023_pcam"),
         across(c(date), lubridate::ymd),
         across(c(time_in, time_out), hms::as_hms)) |> 
  select(expedition, method, ps_station_id, location, date, time_in, time_out, 
         lon_in = long_in, lat_in,  lon_out = long_out, lat_out, rig, left_cam, right_cam, bait, opcode, 
         scan_notes = notes, comments = note, team_lead,
         everything(), -string)
```

```{r sub}
sub_meta <- readxl::read_xlsx(file.path(exp_path,
                                        "data/primary/raw/sub/NIU_2023_sub_fieldbook.xlsx")) |> 
  janitor::clean_names()

sub_meta <- sub_meta |> 
  mutate(expedition = "Niue_2023", 
         method = "Submersible dive",
         ps_station_id = str_replace(ps_station_id, "NIU", "NIU_2023"),
         date = lubridate::dmy(date_dd_mm_yyyy),
         across(c(dive_start, resurface, bottom_time), hms::as_hms)) |>
  select(expedition, method, ps_station_id, location, date, everything(), -date_dd_mm_yyyy) |> 
  mutate(across(c(ends_with("longitude"), ends_with("latitude")) ,
                ~str_remove_all(., "S|W") |> 
                  str_trim() |> 
                  str_squish() |> 
                  str_replace_all(pattern = "\\'", replacement =  " "))) |> 
  rowwise() |> 
  mutate(across(c(ends_with("longitude"), ends_with("latitude")),
                ~measurements::conv_unit(., from = 'deg_dec_min', to = 'dec_deg') |> 
                  as.numeric() |> 
                  round(digits = 4))) |> 
  mutate(across(c(ends_with("longitude"), ends_with("latitude")),
                ~.*-1)) |> 
  select(expedition, method, ps_station_id, location, date, dive_start_time = dive_start, resurface_time = resurface, bottom_time, 
         surface_start_lon = surface_start_longitude, surface_start_lat = surface_start_latitude,
         bottom_start_lat = bottom_start_latitude, bottom_start_lon = bottom_start_longitude,
         bottom_end_lat = bottom_end_latitude, bottom_end_lon = bottom_end_longitude,
         surface_end_lon = surface_end_longitude, surface_end_lat = surface_end_latitude, max_depth_m = max_depth,
         everything()) 
```

```{r tagging}
tags_meta <- readxl::read_xlsx(file.path(exp_path,
                                        "data/primary/raw/tags/NIU_2023_sharktags_fieldbook.xlsx")) |> 
  janitor::clean_names()

tags_meta <- tags_meta |> 
  mutate(expedition = "Niue_2023", 
         method = "Shark tags",
         team_lead = "Jess Cramp",
         ps_station_id = paste0("NIU_2023_shark_", 
                                row_number()),
         lat = as.numeric(lat),
         across(c(date), lubridate::dmy),
         across(where(is.double), round, 4),
         location = case_when(str_detect(location, "anti") ~ "Antiope",
                              str_detect(location, "bever") ~ "Beveridge reef",
                              TRUE ~ "Niue")) |> 
        select(expedition, method, ps_station_id, location, date, lat, lon = long,  
               species, id, sex, pcl_cm, fl_cm, tl_cm, clasper_in_cm, clasper_out_cm,
               ac_tag_id, ac_tag_serial, sat_tag_serial, sat_tag_ptt, 
               team_lead, everything(), -tagger_name, -shark_name)
```

```{r}
shrd_cols <- c("expedition", "method", "ps_station_id", "location", "date", "local_time", "lat", "lon", "team_lead")

exp_meta <- uvs_meta |> 
  select(all_of(shrd_cols)) |> 
  full_join(birds_meta |> 
              rename(local_time = time_start, 
                     lat = lat_start,
                     lon = lon_start) |> 
              select(all_of(shrd_cols))) |> 
  full_join(bruvs_meta |> 
              rename(local_time = time_in) |> 
              select(all_of(shrd_cols))) |> 
  full_join(dscm_meta |> 
              rename(date = date_in,
                     local_time = time_in, lat = lat_in, lon = lon_in) |> 
              select(all_of(shrd_cols))) |> 
  full_join(edna_meta |> 
              rename(local_time = collection_time) |> 
              select(all_of(shrd_cols))) |> 
  full_join(plastics_meta |> 
              rename(local_time = time) |> 
              select(all_of(shrd_cols))) |> 
  full_join(pelagics_meta |> 
              rename(local_time = time_in,
                     lat = lat_in, lon = lon_in) |> 
              select(all_of(shrd_cols))) |> 
  full_join(sub_meta |> 
              rename(local_time = dive_start_time,
                     lat = surface_start_lat, lon = surface_start_lon, team_lead = observer_1) |> 
              select(all_of(shrd_cols))) |> 
  full_join(tags_meta |> 
              mutate(local_time = NA) |> 
              select(all_of(shrd_cols))) |> 
  mutate(location = case_when(str_detect(location, "Anti")~ "Antiope",
                              str_detect(location, "Beve")~ "Beveridge",
                              TRUE ~ location)) 
```

```{r include = T}
library(leaflet)

pal <- colorFactor(as.character(paletteer_d("ggthemes::few_Medium",9 )),
                   domain = unique(exp_meta$method))

exp_meta |> 
  filter(!is.na(lon)) |> 
  distinct(method, ps_station_id, lat, lon) %>% 
  leaflet() %>%
  addTiles() %>%
  setView(-169.7, -19.5, zoom = 8) %>%
  addCircleMarkers(label = ~method, 
                   color = ~pal(method), 
                   radius = 7, fillOpacity = 0.6, stroke = F, 
                   group = ~method) |> 
  addLayersControl(overlayGroups = ~method, 
                   options = layersControlOptions(collapsed = FALSE))
```

```{r include = T}
exp_meta |> 
  filter(location != "Transit") |> 
  group_by(method, location) |> 
  summarise(stations = n_distinct(ps_station_id)) |> 
  pivot_wider(names_from = location, values_from = stations) %>% 
  ungroup() |> 
  gt::gt(rowname_col = "method") %>% 
  gt::tab_header(title = "Number of work stations by region") %>% 
  gt::sub_missing(columns = everything(), missing_text = "0" )  
```

```{r}
exp_meta |> 
  write_csv(file.path(exp_path, "data/primary/output/exp_metadata.csv"))
```

<!-- # Species recorded -->

<!-- ```{r} -->
<!-- fish_obs <- read_csv(file.path(exp_path,  -->
<!--                                "data/primary/processed/NIU_2023_uvs_fish_obs.csv")) -->

<!-- pt_contacts <- readxl::read_xlsx(file.path(exp_path,  -->
<!--                                "data/primary/raw/benthos/NIUE_2023_Transsects-rough.xlsx"),  -->
<!--                                range = "B4:KL46")  -->

<!-- pt_contacts <- readxl::read_xlsx(file.path(exp_path,  -->
<!--                                "data/primary/raw/benthos/NIUE_2023_Transsects-rough.xlsx"),  -->
<!--                                range = "C1:KL2", col_names = FALSE) |>  -->
<!--   slice(1) |>  -->
<!--   t() |>  -->
<!--   as_data_frame() |>  -->
<!--   janitor::row_to_names(row_number = 1) |>  -->
<!--   mutate(tra) -->

<!-- pt_contacts |>  -->
<!--   select(1:2) |>  -->
<!--   set_names(c("func_group", "taxa")) |>  -->
<!--   filter(func_group != "BARREN") |>  -->
<!--   group_by(func_group) |>  -->
<!--   summarize(n_distinct(taxa)) -->

<!-- fish_obs |>  -->
<!--   #group_by(common_family) |>  -->
<!--   summarize(n_distinct(taxon_code)) -->
<!-- ``` -->


